#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/umisrnaseqv
========================================================================================
 nf-core/umisrnaseqv Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/umisrnaseqv
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/umisrnaseqv --input '*_R{1,2}.fastq.gz' -profile docker
    nextflow run umisrnaseqv -profile conda --input 'samplesheet.csv' (../Proyectos/ctDNA/muestras_ctDNA_test/muestras_ctDNA_test_filt/samplesheet.csv)
    nextflow run umisrnaseqv -profile conda --input ../Proyectos/ctDNA/muestras_ctDNA_test/muestras_ctDNA_test_filt/samplesheet.csv


    Mandatory arguments:
      --input [file]                  Path to input data (must be surrounded with quotes)
      -profile [str]                  Configuration profile to use. Can use multiple (comma separated)
                                      Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Options:
      --genome [str]                  Name of iGenomes reference
      --single_end [bool]             Specifies that the input is single-end reads

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --fasta [file]                  Path to fasta reference

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --publish_dir_mode [str]        Mode for publishing results in the output directory. Available: symlink, rellink, link, copy, copyNoFollow, move (Default: copy)
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Threshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

/*
 * VALIDATE INPUTS
 */

if (params.input) { ch_input = file(params.input, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, input samplesheet file not specified!" }

if (params.fasta) { ch_fasta = file(params.fasta, checkIfExists: true) } //else { exit 1, "Cannot carry out the analysis, reference genome file not specified!"}

//(ch_fasta_bwamap, ch_fasta_bwaindex, ch_fasta_dict, ch_fasta_baserecalibrator, ch_fasta_applybqsr, ch_get_fasta_index, ch_fasta_mutect2pair, ch_fasta_filtermutect2calls) = ch_fasta.into(8)

if (params.fasta_index) { ch_fasta_index = file(params.fasta_index, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, reference genome index file not specified!"}

if (params.bwa_index) { ch_bwa_index = Channel.fromPath( params.bwa_index, type: 'dir', checkIfExists: true ) } //else { exit 1, "Cannot carry out the analysis! BWA index not specified! Please, provide a valid path to BWA index or don't skip BWA index obtention!" }

if (params.dict) { ch_dict = Channel.fromPath( params.dict, type: 'dir', checkIfExists: true ) } else { exit 1, "Cannot carry out the analysis! Reference dictionary not specified! Please, provide a valid path to reference dictionary or don't skip Reference dictionary obtention!" }

if (params.bed) { ch_bed = file(params.bed, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, bed file for variants detection not specified!" }

//(ch_bed_baserecalibrator, ch_bed_applybqsr, ch_bed_mutect2pair, ch_bed_getpileupsummaries) = ch_bed.into(4)

if (params.germline) { ch_germline = file(params.germline, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, germline vcf file for variants detection by Mutect2 not specified!"}

//(ch_get_germline_index, ch_germline_mutect2pair, ch_germline_getpileupsummaries) = ch_germline.into(3)

if (params.germline_index) { ch_germline_index = file(params.germline_index, checkIfExists: true) } //else { exit 1, "Cannot carry out the analysis, germline vcf index file not specified!"}

if (params.normal) { ch_normal = file(params.normal, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, normal vcf file not specified!"}

//(ch_get_normal_index, ch_normal_mutect2pair) = ch_normal.into(2)

if (params.normal_index) { ch_normal_index = file(params.normal_index, checkIfExists: true) } //else { exit 1, "Cannot carry out the analysis, normal vcf index file not specified!"}

if (params.dbsnp) { ch_dbsnp = file(params.dbsnp, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, dbsnp file not specified!" }

//(ch_get_dbsnp_index, ch_dbsnp_baserecalibrator) = ch_dbsnp.into(2)

if (params.dbsnp_index) { ch_dbsnp_index = file(params.dbsnp_index, checkIfExists: true) } //else { exit 1, "Cannot carry out the analysis, dbsnp index file not specified!" }

if (params.known_indels) { ch_known_indels = file(params.known_indels, checkIfExists: true) } else { exit 1, "Cannot carry out the analysis, known indels file not specified!" }

//(ch_get_known_indels_index, ch_known_indels_baserecalibrator) = ch_known_indels.into(2)

if (params.known_indels_index) { ch_known_indels_index = file(params.known_indels_index, checkIfExists: true) } //else { exit 1, "Cannot carry out the analysis, known indels index file not specified!" }

if (params.annovar_database) { ch_annovar_database = Channel.fromPath( params.annovar_database, type: 'dir', checkIfExists: true ) } else { exit 1, "Cannot carry out the analysis, annovar database not specified!"}


// Check if reference genome exists in the config file
if (params.genomes && params.genome && !params.genomes.containsKey(params.genome)) {
   exit 1, "The provided genome '${params.genome}' is not available in the Genome file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
params.gff = params.genome ? params.genomes[ params.genome ].gff ?: false : false

//vr?
/*
if (params.fasta) {
    file(params.fasta, checkIfExists: true)

    lastPath = params.fasta.lastIndexOf(File.separator)_index
    lastExt = params.fasta.lastIndexOf(".")
    fasta_base = params.fasta.substring(lastPath+1)
    index_base = params.fasta.substring(lastPath+1,lastExt)
    if (params.fasta.endsWith('.gz')) {
        fasta_base = params.fasta.substring(lastPath+1,lastExt)
        index_base = fasta_base.substring(0,fasta_base.lastIndexOf("."))
    }
} else {
    exit 1, "Reference genome fasta file not specified!"
}
*/

//params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
//if (params.fasta) { ch_fasta = file(params.fasta, checkIfExists: true) }


// Has the run name been specified by the user?
// this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

// Stage config files
ch_multiqc_config = file("$projectDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$projectDir/docs/output.md", checkIfExists: true)
ch_output_docs_images = file("$projectDir/docs/images/", checkIfExists: true)

// Check AWS batch settings
if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}


// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Run Name']         = custom_runName ?: workflow.runName
// TODO nf-core: Report custom parameters here
summary['Input']            = params.input
summary['Fasta Ref']        = params.fasta
summary['Data Type']        = params.single_end ? 'Single-End' : 'Paired-End'
summary['Max Resources']    = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']       = params.outdir
summary['Launch dir']       = workflow.launchDir
summary['Working dir']      = workflow.workDir
summary['Script dir']       = workflow.projectDir
summary['User']             = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']   = params.awsregion
    summary['AWS Queue']    = params.awsqueue
    summary['AWS CLI']      = params.awscli
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Profile Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Profile Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config Profile URL']         = params.config_profile_url
summary['Config Files'] = workflow.configFiles.join(', ')
if (params.email || params.email_on_fail) {
    summary['E-mail Address']    = params.email
    summary['E-mail on failure'] = params.email_on_fail
    summary['MultiQC maxsize']   = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()


///////////////////////////////////////////////////////////////////
/*                                                               */
/*                  UNZIP/UNTAR REFERENCE FILES                  */
/*                                                               */
///////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Uncompress genome fasta file
 */
/*
if (params.fasta) {
    file(params.fasta, checkIfExists: true)
    if (params.fasta.endsWith('.gz')) {
        process GUNZIP_FASTA {
            label 'error_retry'
            if (params.save_reference) {
                publishDir "${params.outdir}/genome", mode: params.publish_dir_mode
            }

            input:
            path fasta from params.fasta

            output:
            path "$unzip" into ch_fasta

            script:
            unzip = fasta.toString() - '.gz'
            """
            pigz -f -d -p $task.cpus $fasta
            """
        }
    } else {
        ch_fasta = file(params.fasta)
    }
}
*/


/*
 * PREPROCESSING 1: Reformat samplesheet and check validity
 */

process CHECK_SAMPLESHEET {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$samplesheet"

    input:
    path samplesheet from ch_input

    output:
    path samplesheet into ch_reformat_input

    script:
    """
    check_samplesheet.py $samplesheet
    """
}


// Function to get list of [ sample_id, [ fastq_1, fastq_2 ], fastq_3 ]
def validate_input(LinkedHashMap sample) {
    
    def patient_id = sample.patient_id
    def state = sample.state
    def sample_id = sample.sample_id
    def fastq_1 = sample.fastq_1
    def fastq_2 = sample.fastq_2

    def array = []

    array = [ patient_id, state, sample_id, [ fastq_1, fastq_2 ]]

    return array
}

/*
 * Create channels for input fastq files
 */
ch_reformat_input
    .splitCsv(header:true, sep:',')
    .map { validate_input(it) }
    .into { ch_fastqc
            ch_trimgalore }


/*
 * PREPROCESSING 2: Duplicate channels
 */

/*
 * PREPROCESSING 2.1: Duplicate reference genome
 */

process DUPLICATE_REF_GENOME {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$fasta"

    input:
    path fasta from ch_fasta

    output:
    path fasta into ch_fasta_bwamap,
                    ch_fasta_bwaindex,
                    ch_fasta_dict, 
                    ch_fasta_baserecalibrator, 
                    ch_fasta_applybqsr, 
                    ch_get_fasta_index, 
                    ch_fasta_mutect2pair, 
                    ch_fasta_filtermutect2calls

    script:
    """
    echo $fasta
    """
}


/*
 * PREPROCESSING 2.2: Duplicate bed file
 */

process DUPLICATE_BED {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$bed"

    input:
    path bed from ch_bed

    output:
    path bed into ch_bed_baserecalibrator, 
                    ch_bed_applybqsr, 
                    ch_bed_mutect2pair, 
                    ch_bed_getpileupsummaries

    script:
    """
    echo $bed
    """
}


/*
 * PREPROCESSING 2.3: Duplicate germline variants file
 */

process DUPLICATE_GERMLINE {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$germline"

    input:
    path germline from ch_germline

    output:
    path germline into ch_get_germline_index, 
                       ch_germline_mutect2pair,
                       ch_germline_getpileupsummaries

    script:
    """
    echo $germline
    """
}


/*
 * PREPROCESSING 2.4: Duplicate normal variants file
 */

process DUPLICATE_NORMAL {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$normal"

    input:
    path normal from ch_normal

    output:
    path normal into ch_get_normal_index, 
                     ch_normal_mutect2pair

    script:
    """
    echo $normal
    """
}


/*
 * PREPROCESSING 2.5: Duplicate dbsnp file
 */

process DUPLICATE_DBSNP {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$dbsnp"

    input:
    path dbsnp from ch_dbsnp

    output:
    path dbsnp into ch_get_dbsnp_index, 
                    ch_dbsnp_baserecalibrator

    script:
    """
    echo $dbsnp
    """
}


/*
 * PREPROCESSING 2.6: Duplicate known indels file
 */

process DUPLICATE_KNOWN_INDELS {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$known_indels"

    input:
    path known_indels from ch_known_indels

    output:
    path known_indels into ch_get_known_indels_index, 
                           ch_known_indels_baserecalibrator

    script:
    """
    echo $known_indels
    """
}



/*
 * PREPROCESSING 3: Obtain auxiliary files
 */

/*
 * PREPROCESSING 3.1: Get reference genome index
 */

if (!params.fasta_index) {
    process GET_FASTA_INDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/fasta_index", mode: params.publish_dir_mode

        input:
        path fasta from ch_get_fasta_index

        output:
        tuple val(sample), path("*fai") into ch_fasta_index

        script:
        """
        ref=\$(echo "$fasta" | rev | cut -c4- | rev)
        gzip -d $fasta
        samtools faidx \$ref
        """
    }
}

// (ch_fasta_index_baserecalibrator, ch_fasta_index_mutect2pair) = ch_fasta_index.into(2)


/*
 * PREPROCESSING 3.2: Get BWA index
 */

if (!params.bwa_index) {
    process BWAINDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_high'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/bwa_index", mode: params.publish_dir_mode

        input:
        path fasta from ch_fasta_bwaindex

        output:
        path "index" into ch_bwa_index   

        script:
        """
        mkdir index
        mv $fasta ./index/reference_genome.fna
        bwa index ./index/reference_genome.fna
        """
    }
}


/*
 * PREPROCESSING 3.3: Get reference genome dictionary
 */

if (!params.dict) {
    process DICT {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$dict"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/fasta_dict", mode: params.publish_dir_mode

        input:
        path fasta from ch_fasta_dict

        output:
        path "*dict" into ch_dict

        script:
        """
        picard CreateSequenceDictionary $fasta
        """
    }
}

// (ch_dict_bwamap, ch_dict_baserecalibrator, ch_dict_mutect2pair) = ch_dict.into(3)


/*
 * PREPROCESSING 3.4: Get germline panel index
 */

if (!params.germline_index) {
    process GERMLINE_PANEL_INDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/germline_panel_index", mode: params.publish_dir_mode

        input:
        path vcf_germline from ch_get_germline_index

        output:
        path "*.tbi" into ch_germline_index 
        
        script:
        
        """
        gatk IndexFeatureFile -I $vcf_germline
        """
    }
}

/*
 * PREPROCESSING 3.5: Get normal panel index
 */

if (!params.normal_index) {
    process NORMAL_PANEL_INDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/normal_panel_index", mode: params.publish_dir_mode

        input:
        path vcf_normal from ch_get_normal_index

        output:
        path "*.tbi" into ch_normal_index 
        
        script:
        
        """
        gatk IndexFeatureFile -I $vcf_normal
        """
    }
}

/*
 * PREPROCESSING 3.6: Get dbsnp index
 */

if (!params.dbsnp_index) {
    process DBSNP_INDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/dbsnp_index", mode: params.publish_dir_mode

        input:
        path dbsnp from ch_get_dbsnp_index

        output:
        path "*.tbi" into ch_dbsnp_index 
        
        script:
        
        """
        gatk IndexFeatureFile -I $dbsnp
        """
    }
}

/*
 * PREPROCESSING 3.7: Get known indles index
 */

if (!params.known_indels_index) {
    process KNOWN_INDELS_INDEX {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/aux_files/known_indels_index", mode: params.publish_dir_mode

        input:
        path known_indels from ch_get_known_indels_index

        output:
        path "*.tbi" into ch_known_indels_index 
        
        script:
        
        """
        gatk IndexFeatureFile -I $known_indels
        """
    }
}


/*
 * PREPROCESSING 4: Duplicate channels x2
 */

/*
 * PREPROCESSING 4.1: Duplicate reference genome index
 */

process DUPLICATE_REF_GENOME_INDEX {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$fasta_index"

    input:
    path fasta_index from ch_fasta_index

    output:
    path fasta_index into ch_fasta_index_baserecalibrator, 
                          ch_fasta_index_mutect2pair,
                          ch_fasta_index_applybqsr,
                          ch_fasta_index_filtermutectcalls

    script:
    """
    echo $fasta_index
    """
}

/*
 * PREPROCESSING 4.2: Duplicate reference genome dictionary
 */

process DUPLICATE_DICT {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$dict"

    input:
    path dict from ch_dict

    output:
    path dict into ch_dict_bwamap, 
                   ch_dict_baserecalibrator,
                   ch_dict_applybqsr,
                   ch_dict_mutect2pair, 
                   ch_dict_filtermutectcalls

    script:
    """
    echo $dict
    """
}

/*
 * PREPROCESSING 4.3: Duplicate germline variants index
 */

process DUPLICATE_GERMLINE_INDEX {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$germline_index"

    input:
    path germline_index from ch_germline_index

    output:
    path germline_index into ch_germline_index_mutect2, 
                             ch_germline_index_getpileupsummaries

    script:
    """
    echo $germline_index
    """
}
 

//////////////////////////////

/*
 * STEP 1: FastQC on input reads after merging libraries from the same sample
 */
process FASTQC {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    label 'process_low'
    //label 'process_medium'
    publishDir "${params.outdir}/1_fastqc/$patient/$sample", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : filename
                }

    when:
    !params.skip_fastqc

    input:
    tuple val(patient), val(status), val(sample), path(reads) from ch_fastqc

    output:
    path "*.{zip,html}" into ch_fastqc_raw_reports_mqc

    script:
    """
    fastqc --quiet --threads $task.cpus $reads
    """
}


/*
 * STEP 2 - Trimgalore adapter trimming and quality filtering
 */

if (!params.skip_trimgalore_trimming) {
    process TRIMGALORE {
        conda '/home/espell/anaconda3/envs/v_exomas'
        tag "$sample"
        //label 'process_medium'
        label 'process_low'
        publishDir "${params.outdir}/2_trimgalore/$patient/$sample", mode: params.publish_dir_mode

        input:
        tuple val(patient), val(status), val(sample), path(reads) from ch_trimgalore

        output:
        tuple val(patient), val(status), val(sample), path("*val_{1,2}.fq.gz") into ch_bwamap
        path "*_fastqc.html"
        path "*_fastqc.zip"

        script:

        """
        trim_galore --fastqc --paired --cores 4 --gzip --output_dir ./ ${reads[0]} ${reads[1]}
        """
    }

} else {
    ch_trimgalore
        .into { ch_bwamap }
}


/*
 * STEP 3 - Reads mapping
 */

process BWAMAP {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/3_bwamap/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(reads), path(bwa_index), path(fasta), path(dict) from ch_bwamap.combine(ch_bwa_index).combine(ch_fasta_bwamap).combine(ch_dict_bwamap)

    output:
    tuple val(patient), val(status), val(sample), path("*.map.srt.bam") into ch_mark_duplicates

    script:
    
    """
    bwa mem -t 4 -M  ${bwa_index}/${fasta} ${reads[0]} ${reads[1]} > ${sample}.map.sam
    picard SortSam INPUT=${sample}.map.sam OUTPUT=${sample}.map.srt.sam SORT_ORDER=coordinate
    samtools view -Sb ${sample}.map.srt.sam > ${sample}.map.srt.bam
    """
}


/*
 * STEP 4 - Mark Duplicated reads
 */

process MARKDUPLICATES {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_medium'
    label 'process_low'
    publishDir "${params.outdir}/4_markduplicates/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(bam) from ch_mark_duplicates

    output:
    tuple val(patient), val(status), val(sample), path("*.map.srt.md.bam") into ch_add_or_replace_read_groups

    script:
    
    """
    gatk MarkDuplicates --INPUT $bam --METRICS_FILE ${sample}.map.srt.md.bam.metrics --TMP_DIR . --ASSUME_SORT_ORDER coordinate --CREATE_INDEX true --OUTPUT ${sample}.map.srt.md.bam
    """
}


/*
 * STEP 5 - Add or Replace Read Groups. Assigns all the reads in a file to a single new read-group
 */

process ADDORREPLACEREADGROUPS {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_medium'
    label 'process_low'
    publishDir "${params.outdir}/5_addorreplacereadgroups/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(bam) from ch_add_or_replace_read_groups

    output:
    tuple val(patient), val(status), val(sample), path("*.map.srt.md.gr.bam"), path("*.bai") into ch_baserecalibrator

    script:
    
    """
    picard AddOrReplaceReadGroups I=$bam O=${sample}.map.srt.md.gr.bam RGID=4 RGLB=lib1 RGPL=ILLUMINA RGPU=unit1 RGSM=$sample    
    samtools index ${sample}.map.srt.md.gr.bam
    """
}
/*
java -jar picard.jar AddOrReplaceReadGroups \
       I=input.bam \
       O=output.bam \
       RGID=4 \ --> Read-Group ID
       RGLB=lib1 \ --> Read-Group library
       RGPL=ILLUMINA \ --> Read-Group platform (e.g. ILLUMINA, SOLID)
       RGPU=unit1 \ --> Read-Group platform unit (eg. run barcode)
       RGSM=20 --> Read-Group sample name
*/

/*
 * STEP 6 - Base Quality Recalibration: BaseRecalibrator
 */

process BASERECALIBRATOR {
    conda '/home/espell/anaconda3/envs/v_exomas'

    tag "$sample"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/6_baserecalibrator/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(bam), path(bai_index), path(fasta), path(fai), path(bed), path(dbsnp), path(dict) from ch_baserecalibrator.combine(ch_fasta_baserecalibrator).combine(ch_fasta_index_baserecalibrator).combine(ch_bed_baserecalibrator).combine(ch_dbsnp_baserecalibrator).combine(ch_dict_baserecalibrator)
    path dbsnp_index from ch_dbsnp_index
    path known_indels from ch_known_indels
    path known_indels_index from ch_known_indels_index

    output:
    tuple val(patient), val(status), val(sample), path(bam), path("*.map.srt.md.br.recal.table") into ch_applybqsr

    script:
    """
    gatk BaseRecalibrator -I $bam -O ${sample}.map.srt.md.br.recal.table --tmp-dir . -R $fasta -L $bed --known-sites $dbsnp --known-sites $known_indels --verbosity INFO
    """
}

/*
gatk BaseRecalibrator \
-I my_reads.bam \
-R reference.fasta \
--known-sites sites_of_variation.vcf \
--known-sites another/optional/setOfSitesToMask.vcf \
-O recal_data.table
*/


/*
 * STEP 7 - Base Quality Recalibration: ApplyBQSR
 */

process APPLYBQSR {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_medium'
    label 'process_low'
    publishDir "${params.outdir}/7_applybqsr/$patient/$sample", mode: params.publish_dir_mode
    
    input:
    tuple val(patient), val(status), val(sample), path(bam), path(recaltable), path(fasta), path(fasta_index), path(bed), path(dict) from ch_applybqsr.combine(ch_fasta_applybqsr).combine(ch_fasta_index_applybqsr).combine(ch_bed_applybqsr).combine(ch_dict_applybqsr)

    output: 
    tuple val(patient), val(status), val(sample), path("*.map.srt.md.gr.recal.bam"), path("*.bai") into ch_mutect2_pair_tumor,
                                                                                                        ch_mutect2_pair_normal
    path "*.map.srt.md.gr.recal.bam"

    script:
    """
    gatk ApplyBQSR -R $fasta -I $bam -O ${sample}.map.srt.md.gr.recal.bam -L $bed --bqsr-recal-file $recaltable
    """
}

/*
gatk ApplyBQSR \
        -R ${fasta} \
        --input ${bam} \
        --output ${prefix}${idSample}.recal.bam \
        ${intervalsOptions} \
        --bqsr-recal-file ${recalibrationReport}
*/


/*
 * STEP 8.1 - Paired (Tumor vs Normal samples) Mutect2 Variants Detection
 */

ch_mutect2_pair_tumor
        .filter { it[1] == "1" } // (T=1, N=0)
        .into { ch_mutect2_pair_tumor_f
                ch_get_pileup_summaries }

ch_mutect2_pair_normal
        .filter { it[1] == "0" } // (T=1, N=0)
        .map { [ it[0], it[2], it[3], it[4] ] }
        .into { ch_mutect2_pair_normal_f }

ch_mutect2_pair_tumor_f.join(ch_mutect2_pair_normal_f, by: 0).into { ch_mutect2_pair_tn }

process MUTECT2PAIR {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "${tumorsample}_vs_${normalsample}"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/8.1_mutect2_pair/$patient", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(tumorsample), path(tumorbam), path(tumorbai), val(normalsample), path(normalbam), path(normalbai), path(fasta), path(bed), path(germline), path(pon), path(dict), path(fai) from ch_mutect2_pair_tn.combine(ch_fasta_mutect2pair).combine(ch_bed_mutect2pair).combine(ch_germline_mutect2pair).combine(ch_normal_mutect2pair).combine(ch_dict_mutect2pair).combine(ch_fasta_index_mutect2pair)
    path germline_index from ch_germline_index_mutect2
    path pon_index from ch_normal_index

    output:
    tuple val(patient), val(status), val("${tumorsample}_vs_${normalsample}"), path("*.vcf"), path("*.vcf.stats") into ch_filter_mutect2_calls_variants 
    path "*${tumorsample}_vs_${normalsample}.bam"

    script:
    """
    gatk Mutect2 -R $fasta -I $tumorbam -tumor $tumorsample -I $normalbam -normal $normalsample -L $bed --germline-resource $germline --panel-of-normals $pon -O ${tumorsample}_vs_${normalsample}.vcf -bamout ${tumorsample}_vs_${normalsample}.bam
    """
}


/*
    input:
        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor), file(intervalBed) from pairBamMutect2
        file(dict) from ch_dict
        file(fasta) from ch_fasta
        file(fastaFai) from ch_fai
        file(germlineResource) from ch_germline_resource
        file(germlineResourceIndex) from ch_germline_resource_tbi
        file(intervals) from ch_intervals
        file(pon) from ch_pon
        file(ponIndex) from ch_pon_tbi

    PON = params.pon ? "--panel-of-normals ${pon}" : ""
    intervalsOptions = params.no_intervals ? "" : "-L ${intervalBed}"
    softClippedOption = params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true" : ""
    """
    # Get raw calls
    gatk Mutect2 \
      -R ${fasta}\
      -I ${bamTumor} -tumor ${idSampleTumor} \
      -I ${bamNormal} -normal ${idSampleNormal} \
      ${intervalsOptions} \
      ${softClippedOption} \
      --germline-resource ${germlineResource} \
      ${PON} \
      -O ${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf
*/

/*
 * STEP 8.2 - Generate pileup summaries
 */

process GETPILEUPSUMMARIES {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/8.2_getpileupsummaries/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(bam), path(bai), path(germline), path(germline_index), path(bed) from ch_get_pileup_summaries.combine(ch_germline_getpileupsummaries).combine(ch_germline_index_getpileupsummaries).combine(ch_bed_getpileupsummaries)

    output:
    tuple val(patient), val(status), val(sample), path("*.map.srt.md.gr.recal_pileupsummaries.table") into ch_calculate_contamination 

    script:
    """
    gatk GetPileupSummaries -I $bam -V $germline -L $bed -O ${sample}.map.srt.md.gr.recal_pileupsummaries.table
    """
}

/*
    input:
        set idPatient, idSample, file(bamTumor), file(baiTumor), file(intervalBed), file(statsFile) from bamPileupSummaries
        file(germlineResource) from ch_germline_resource
        file(germlineResourceIndex) from ch_germline_resource_tbi

 gatk GetPileupSummaries \
   -I tumor.bam \
   -V common_biallelic.vcf.gz \
   -L common_biallelic.vcf.gz \
   -O pileups.table

    gatk --java-options "-Xmx${task.memory.toGiga()}g" \
        GetPileupSummaries \
        -I ${bamTumor} \
        -V ${germlineResource} \
        ${intervalsOptions} \
        -O ${intervalBed.baseName}_${idSample}_pileupsummaries.table
*/



/*
 * STEP 8.3 - Calculate contamination
 */

process CALCULATECONTAMINATION {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/8.3_calculatecontamination/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(table) from ch_calculate_contamination

    output:
    tuple val(patient), path("*.map.srt.md.gr.recal_contamination.table") into ch_filter_mutect2_calls_contamination

    script:
    """
    gatk CalculateContamination -I $table -O ${sample}.map.srt.md.gr.recal_contamination.table
    """
}


/*
 * STEP 8.4 - Filter Mutect Calls
 */

ch_filter_mutect2_calls_variants.join(ch_filter_mutect2_calls_contamination, by: 0).into { ch_filter_mutect2_calls }

process FILTERMUTECT2CALLS {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    label 'process_low'
    //label 'process_medium'
    publishDir "${params.outdir}/8.4_filtermutect2calls/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(vcf), path(stats), path(table), path(fasta), path(fai), path(dict) from ch_filter_mutect2_calls.combine(ch_fasta_filtermutect2calls).combine(ch_fasta_index_filtermutectcalls).combine(ch_dict_filtermutectcalls)

    //file(dict) from ch_dict 
    //file(fastaFai) from ch_fai

    output:
    tuple val(patient), val(status), val(sample), path("Mutect2_filtered_${sample}.vcf.gz") into ch_annovar

    script:
    """    
    gatk FilterMutectCalls -V $vcf --contamination-table $table --stats $stats -R $fasta -O Mutect2_filtered_${sample}.vcf.gz
    """
}

/*
    input:
        set idPatient, idSample, file(unfiltered), file(unfilteredIndex), file(stats), file(contaminationTable) from mutect2CallsToFilter
        file(dict) from ch_dict
        file(fasta) from ch_fasta
        file(fastaFai) from ch_fai
        file(germlineResource) from ch_germline_resource
        file(germlineResourceIndex) from ch_germline_resource_tbi
        file(intervals) from ch_intervals

    script:
    """
    # do the actual filtering
    gatk --java-options "-Xmx${task.memory.toGiga()}g" \
        FilterMutectCalls \
        -V ${unfiltered} \
        --contamination-table ${contaminationTable} \
        --stats ${stats} \
        -R ${fasta} \
        -O Mutect2_filtered_${idSample}.vcf.gz
*/



/*
 * STEP 9 - Variants Annotations
 */

process ANNOVAR {
    conda '/home/espell/anaconda3/envs/v_exomas'
    tag "$sample"
    //label 'process_high'
    label 'process_low'
    publishDir "${params.outdir}/9_annovar/$patient/$sample", mode: params.publish_dir_mode

    input:
    tuple val(patient), val(status), val(sample), path(vcf), path(database) from ch_annovar.combine(ch_annovar_database)

    output:
    tuple val(patient), val(status), val(sample), path("*.txt") into ch_annovar_annotations
    path "*mutect2-anno-cos95.ensGene.hg38_multianno.vcf"

    script:
    """
    table_annovar.pl $vcf $database -buildver hg38 -out ${sample}.mutect2-anno-cos95.ensGene -remove -nastring . -protocol ensGene,cosmic95,tcgaBRCA,tcgaALL -operation g,f,f,f -vcfinput
    # table_annovar.pl /home/espell/Proyectos/afermama/variants_analysis_exome/prueba_sarek/prueba_analisis/mutect2_p6_filteringcalls/aws-igenomes/Mutect2_filtered_SLGFSK-T_231336_vs_SLGFSK-N_231335.vcf.gz /home/espell/Proyectos/afermama/humandb -buildver hg38 -out SLGFSK-T_231336_vs_SLGFSK-N_231335.mutect2-cos95.ensGene -remove -nastring . -protocol ensGene,cosmic95,tcgaBRCA,tcgaALL -operation g,f,f,f -vcfinput
    """
}


Channel.from(summary.collect{ [it.key, it.value] })
    .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
    .reduce { a, b -> return [a, b].join("\n            ") }
    .map { x -> """
    id: 'nf-core-umisrnaseqv-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/umisrnaseqv Workflow Summary'
    section_href: 'https://github.com/nf-core/umisrnaseqv'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
            $x
        </dl>
    """.stripIndent() }
    .set { ch_workflow_summary }

/*
 * Parse software version numbers
 */

/*
process get_software_versions {
    //conda '/mnt/home/users/b02_cimes_uma/elpz/.conda/envs/env_umis_picasso'
    conda '/home/espell/anaconda3/envs/v_exomas'
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf(".csv") > 0) filename
                      else null
                }

    output:
    file 'software_versions_mqc.yaml' into ch_software_versions_yaml
    file "software_versions.csv"

    script:
    // TODO nf-core: Get all tools to print their version number here
    """
    echo $workflow.manifest.version > v_pipeline.txt
    echo $workflow.nextflow.version > v_nextflow.txt
    fastqc --version > v_fastqc.txt
    multiqc --version > v_multiqc.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}
*/


/*
 * STEP X - MultiQC
 */

/*
process multiqc {
    //conda '/mnt/home/users/b02_cimes_uma/elpz/programas/programas_dev/envs_nextflow/env_umis_picasso'
    //conda '/mnt/home/users/b02_cimes_uma/elpz/programas/programas_dev/umisrnaseqv/work/conda/nf-core-umisrnaseqv-1.0dev-fa07ab28398bb031f9fc76ea12cbc91c'
    conda '/mnt/home/users/b02_cimes_uma/elpz/.conda/envs/env_umis_picasso'
    publishDir "${params.outdir}/MultiQC", mode: params.publish_dir_mode

    input:
    file (multiqc_config) from ch_multiqc_config
    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])
    // TODO nf-core: Add in log files from your new processes for MultiQC to find!
    file ('fastqc/*') from ch_fastqc_results.collect().ifEmpty([])
    file ('software_versions/*') from ch_software_versions_yaml.collect()
    file workflow_summary from ch_workflow_summary.collectFile(name: "workflow_summary_mqc.yaml")

    output:
    file "*multiqc_report.html" into ch_multiqc_report
    file "*_data"
    file "multiqc_plots"

    script:
    rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
    rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
    custom_config_file = params.multiqc_config ? "--config $mqc_custom_config" : ''
    // TODO nf-core: Specify which MultiQC modules to use with -m for a faster run time
    """
    multiqc -f $rtitle $rfilename $custom_config_file .
    """
}
*/

/*
 * STEP Y - Output Description HTML
 */
/*
process output_documentation {
    //conda '/mnt/home/users/b02_cimes_uma/elpz/programas/programas_dev/envs_nextflow/env_umis_picasso'
    //conda '/mnt/home/users/b02_cimes_uma/elpz/programas/programas_dev/umisrnaseqv/work/conda/nf-core-umisrnaseqv-1.0dev-fa07ab28398bb031f9fc76ea12cbc91c'
    conda '/mnt/home/users/b02_cimes_uma/elpz/.conda/envs/env_umis_picasso'
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file output_docs from ch_output_docs
    file images from ch_output_docs_images

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.py $output_docs -o results_description.html
    """
}
*/

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/umisrnaseqv] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/umisrnaseqv] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/umisrnaseqv] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/umisrnaseqv] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$projectDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$projectDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, projectDir: "$projectDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$projectDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/umisrnaseqv] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            def mail_cmd = [ 'mail', '-s', subject, '--content-type=text/html', email_address ]
            if ( mqc_report.size() <= params.max_multiqc_email_size.toBytes() ) {
              mail_cmd += [ '-A', mqc_report ]
            }
            mail_cmd.execute() << email_html
            log.info "[nf-core/umisrnaseqv] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/umisrnaseqv]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/umisrnaseqv]${c_red} Pipeline completed with errors${c_reset}-"
    }

}


def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/umisrnaseqv v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}